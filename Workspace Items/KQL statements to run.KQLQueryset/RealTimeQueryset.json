{
  "queryset": {
    "version": "1.0.0",
    "dataSources": [
      {
        "id": "7ab07667-b9a9-4351-a757-57cdc1c5ad2b",
        "clusterUri": "",
        "type": "Fabric",
        "databaseItemId": "024a0c0f-3aa8-9df2-476b-4e5128bf0a46",
        "databaseItemName": "EH_Stocks"
      },
      {
        "id": "2c777a3e-350d-45bc-b39c-3cd09531ac7b",
        "clusterUri": "https://trd-3tr1pgzcmu0nwzvm6c.z2.kusto.fabric.microsoft.com",
        "type": "Fabric",
        "databaseItemId": "unallocatedDb",
        "databaseItemName": "unallocatedDb"
      }
    ],
    "tabs": [
      {
        "id": "1043d77f-9eba-4a2c-ac5e-9818950d0d19",
        "content": ".show function GetStock\n\n// Parameter: (UpperEnd:datetime, WindowSize:string, BinSize:string)\n\n// Definition\n{\n  Stock\n  | where valueTimestamp between (UpperEnd - totimespan(WindowSize) .. UpperEnd)\n    //\n    // Generate a data point for every day and fill it forward (data contain empty spots, e.g. over the weekend)\n    | make-series close = take_any(close) default =real(null), volume = (take_any(volume)) default=int(null) on valueTimestamp step 1d by Symbol\n    | extend close = series_fill_forward(close), volume = series_fill_const(volume,0)  \n    | mv-expand close, volume, valueTimestamp\n    | extend close=toreal(close), volume=toint(volume), valueTimestamp=todatetime(valueTimestamp)\n    //\n    // Create buckets\n    | summarize  arg_max_Ts_close = arg_max(valueTimestamp, close), arg_min_Ts_close = arg_min(valueTimestamp, close), minClose=min(close), avgClose=avg(close), maxClose=max(close), volume = sum(volume) by bin(valueTimestamp, totimespan(BinSize)), Symbol\n    | project valueTimestamp=arg_max_Ts_close               // Last valueTimestamp in bucket\n            , Symbol\n            , close                                         // Close of the last valueTimestamp in bucket\n            , bucketStart_valueTimestamp = arg_min_Ts_close // First valueTimestamp in bucket\n            , bucketStart_close          = close1           // Close of the first valueTimestamp in bucket\n            , minClose\n            , avgClose\n            , maxClose                  \n            , volume                                        // Sum of the volume in the bucket\n    //\n    // Calculate the growth on bucket granularity\n    | partition by Symbol\n    (\n      order by valueTimestamp asc\n      | extend lastClose = prev(close)\n      | extend gain = close - lastClose\n      | extend gainPct = gain/lastClose\n      | extend gainPct100 = round(gainPct * 100,2)\n      | extend gainLoss = iif(gain > 0,1,iif(gain<0,-1,0))\n    )\n}\n\n\n\n// 01: Show fill the gap and window definitions\nlet UpperEnd=datetime('2025-01-10');\nlet WindowSize='31d';\nlet BinSize='1d';\n//{\n Stock\n  | where valueTimestamp between (UpperEnd - totimespan(WindowSize) .. UpperEnd)\n  | where Symbol == 'MSFT'                                                             // Demo purose\n    //\n    // Generate a data point for every day and fill it forward (data contain empty spots, e.g. over the weekend)\n    | make-series close = take_any(close) default =real(null), volume = (take_any(volume)) default=int(null) on valueTimestamp step 1d by Symbol\n    | extend close = series_fill_forward(close), volume = series_fill_const(volume,0)  \n    | mv-expand close, volume, valueTimestamp\n    | extend close=toreal(close), volume=toint(volume), valueTimestamp=todatetime(valueTimestamp)\n    | render linechart with(ycolumns=close, xcolumn=valueTimestamp, series=Symbol)\n//}\n\n\n// 02: Create the buckets\nlet UpperEnd=datetime('2025-01-10');\nlet WindowSize='31d';\nlet BinSize='4d';\n  Stock\n  | where valueTimestamp between (UpperEnd - totimespan(WindowSize) .. UpperEnd)\n  | where Symbol == 'MSFT'                                                             // Demo purose\n    //\n    // Generate a data point for every day and fill it forward (data contain empty spots, e.g. over the weekend)\n    | make-series close = take_any(close) default =real(null), volume = (take_any(volume)) default=int(null) on valueTimestamp step 1d by Symbol\n    | extend close = series_fill_forward(close), volume = series_fill_const(volume,0)  \n    | mv-expand close, volume, valueTimestamp\n    | extend close=toreal(close), volume=toint(volume), valueTimestamp=todatetime(valueTimestamp)\n    //\n    // Create buckets\n    | summarize  arg_max_Ts_close = arg_max(valueTimestamp, close)\n               , arg_min_Ts_close = arg_min(valueTimestamp, close)\n               , minClose=min(close)\n               , avgClose=avg(close)\n               , maxClose=max(close)\n               , volume = sum(volume) \n                  by bin(valueTimestamp, totimespan(BinSize)), Symbol\n    | render linechart with(ycolumns=close, xcolumn=arg_max_Ts_close, series=Symbol)\n}\n\n\n\nGetStock(now(),'120d','7d')\n \nGetStock(now(), '720d', '5d')\n| where Symbol in ('MSFT', 'NVDA')\n| render linechart with(ycolumns=close, xcolumn=valueTimestamp, series=Symbol)\n\n\nStock\n| distinct Symbol",
        "title": "Power BI interface",
        "dataSourceId": "7ab07667-b9a9-4351-a757-57cdc1c5ad2b"
      },
      {
        "id": "d0e57671-aca1-45c7-96cb-8d2c69753e2d",
        "content": "// Full statement, overview\nStock\n| where Symbol in ('UBSG.SW', 'AAPL', 'GOOG', 'MSFT')\n| where valueTimestamp  > datetime(1996-01-01)\n| summarize max(close) by Symbol, bin(valueTimestamp, 30d)\n| render linechart with(xcolumn=valueTimestamp, series=Symbol)\n\n// Step by step\nGold_Stock\n| where valueTimestamp between (datetime(2020-01-01) .. datetime(2021-05-01)) and Symbol in('UBSG.SW', 'AAPL', 'GOOG', 'MSFT')\n| project Symbol, valueTimestamp, close\n| evaluate pivot(Symbol, any(close))\n| render timechart with(ysplit=panels)\n\n// Calling function\nGetStock(now(), '720d', '1d')\n| where Symbol in ('UBSG.SW', 'AAPL', 'GOOG', 'MSFT')\n| render linechart with(ycolumns=close, xcolumn=valueTimestamp, series=Symbol)\n\n// Calling function but showing gain instead of line\nGetStock(now(), '720d', '1d')\n| where Symbol in ('UBSG.SW', 'AAPL', 'GOOG', 'MSFT')\n| render linechart with(ycolumns=gain, xcolumn=valueTimestamp, series=Symbol)",
        "title": "Line Charts",
        "dataSourceId": "7ab07667-b9a9-4351-a757-57cdc1c5ad2b"
      },
      {
        "id": "b5f09514-2b3a-4cc7-bf95-eccb5f014bab",
        "content": "range x from 1 to 100 step 1 \n| extend y=iff(x==20 or x==80, 10*rand()+10+(50-x)/2, 10*rand()+10) // series with outliers at x=20 and x=80\n| summarize x=make_list(x),series=make_list(y)\n| extend series_stats(series), outliers=series_outliers(series)\n| mv-expand x to typeof(long), series to typeof(double), outliers to typeof(double)\n| project x, series , outliers_removed=iff(outliers > 1.5 or outliers < -1.5, series_stats_series_avg , series ) \n| render linechart",
        "title": "Outliers",
        "dataSourceId": "7ab07667-b9a9-4351-a757-57cdc1c5ad2b"
      },
      {
        "id": "526820ea-9941-490f-80e7-377b73cce0f9",
        "content": "\nStock\n| where Symbol in ('AAPL', 'MSFT', 'ORCL', 'NVDA', 'ABBN.SW', 'GOOG')\n| where valueTimestamp  > datetime(1996-01-01)\n| summarize max(close) by Symbol, bin(valueTimestamp, 30d)\n| render linechart with(xcolumn=valueTimestamp, series=Symbol)\n\n\n// raw data, fill the gap, either linear or forward\n\nStock\n| where valueTimestamp  between (datetime(2023-10-26) .. datetime(2023-11-17))\n| make-series sValue = take_any(close) default=real(null) on valueTimestamp step 1d by Symbol\n| render linechart with(xcolumn=valueTimestamp, series=Symbol)\n\n\nStock\n| where Symbol  in ('MSFT')\n| where valueTimestamp  between (datetime(2023-10-26) .. datetime(2023-11-17))\n| make-series sValue = take_any(close) default=real(null) on valueTimestamp step 1d by Symbol\n| render linechart with(xcolumn=valueTimestamp, series=Symbol)\n\n\n\nStock\n| where Symbol  in ('MSFT')\n| where valueTimestamp  between (datetime(2023-10-26) .. datetime(2023-11-17))\n| make-series sValue = take_any(close) default=real(null) on valueTimestamp step 1d by Symbol\n//| extend      sValue = series_fill_linear(sValue)\n//| extend      sValue = series_fill_forward(sValue)\n| render linechart with(xcolumn=valueTimestamp, series=Symbol)\n\n\nStock\n| where Symbol  in ('MSFT')\n| where valueTimestamp  between (datetime(2023-10-26) .. datetime(2023-11-17))\n| make-series sValue = take_any(close) default=real(null) on valueTimestamp step 1d by Symbol\n//| extend      sValue = series_fill_linear(sValue)\n//| extend      sValue = series_fill_forward(sValue)\n| render linechart with(xcolumn=valueTimestamp, series=Symbol)\n\nStock\n| where Symbol in ('AAPL', 'MSFT', 'ORCL', 'NVDA', 'ABBN.SW', 'GOOG')\n| where valueTimestamp  between (datetime(2023-01-01) .. now())\n| make-series sValue = take_any(close) default=real(null) on valueTimestamp step 1d by Symbol\n| extend      sValue = series_fill_linear(sValue)\n| extend Yesterday_sValue = array_shift_right(sValue, 1)\n| extend gain = series_subtract(sValue, Yesterday_sValue)\n| extend pct_gain        = series_divide  (gain, Yesterday_sValue)\n| mv-expand valueTimestamp, sValue, Yesterday_sValue, gain, pct_gain\n| extend pct_gain = toreal(pct_gain) * 100, gain=toreal(gain)\n| project Symbol, todatetime(valueTimestamp), pct_gain, gain // sValue, Yesterday_sValue, gain, pct_gain\n| render linechart with(xcolumn=valueTimestamp, ycolumns=pct_gain, series=Symbol)\n\n\nStock\n| make-series sValue = take_any(close) default=real(null) on valueTimestamp step 1d by Symbol\n| extend      sValue = series_fill_linear(sValue)\n| extend Yesterday_sValue= array_shift_right(sValue, 1)\n| extend gain = series_subtract(sValue, Yesterday_sValue)\n| extend pct_gain        = series_divide  (gain, Yesterday_sValue)\n| mv-expand valueTimestamp, sValue, Yesterday_sValue, gain, pct_gain\n| project Symbol, valueTimestamp, sValue, Yesterday_sValue, gain, pct_gain\n\nStock\n| make-series sValue = take_any(close) default=real(null) on valueTimestamp step 1d by Symbol\n| extend      sValue = series_fill_linear(sValue)\n| extend DayAhead_sValue= array_shift_left(sValue, 1)\n| extend gain = series_subtract(DayAhead_sValue, sValue)\n| project Symbol, valueTimestamp, gain\n| render linechart with( xcolumn=valueTimestamp, series=Symbol)\n",
        "title": "Stock Analysis",
        "dataSourceId": "7ab07667-b9a9-4351-a757-57cdc1c5ad2b"
      }
    ]
  }
}